#!/usr/bin/env python
# coding=utf-8
# pqrparser.py - A basic PQR file parser. It parses the pqr files generated by 
# pdb2pqr with the `--whitespace' option enabled.
#
# Carlos RÃ­os V. <crosvera@gmail.com>
#

import sys, os

import numpy as np

class Atom():
    def __init__(self, field_name, atom_number, atom_name, resi_name, chain, resi_number, x, y, z, charge, radius):
        self.fieldname = field_name
        self.serial = int(atom_number)
        self.name = atom_name
        self.resname = resi_name
        self.chain = chain
        self.resnum = int(resi_number)
        self.coords = np.array([np.float(x), np.float(y), np.float(z)], dtype=float)
        self.charge = np.float(charge)
        self.radii = np.float(radius)

    def __repr__(self):
        return "<Atom: %s %s:%d (serial %d)>" % (self.name, self.resname, 
                                                 self.resnum, self.serial)


class AtomGroup():
    def __init__(self, structure):
        self.structure = structure.split(os.sep)[-1][:-4]
        self._atoms = []
        self.index = 0

    def __iter__(self):
        return self

    def __next__(self):
        try:
            result = self._atoms[self.index]
        except IndexError:
            raise StopIteration
        self.index += 1
        return result

    def next(self):
        return self.__next__()

    def addAtom(self, line):
        line = line.strip().split()
        self._atoms.append(Atom(line[0], line[1], line[2], line[3], line[4], line[5],\
                                line[6], line[7], line[8], line[9], line[10]))
        
    def __len__(self):
        return len(self._atoms)




def parsePQR(pqr):
    if not os.path.isfile(pqr):
        raise IOError("{0} is not a valid filename.".format(pqr))
    elif pqr[-4:] != ".pqr" and pqr[-4:] != ".PQR":
        raise IOError("{0} has not a .pqr extension.".format(pqr))

    f = open(pqr, "rU")
    cnt = f.readlines()
    f.close()

    atoms = AtomGroup(pqr)
    for l in cnt:
        l = l.strip()
        if l.startswith("ATOM") or l.startswith("HETATM"):
            atoms.addAtom(l)

    return atoms

